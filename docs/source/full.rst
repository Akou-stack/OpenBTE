Full Collision Operator
===================================

In many cases the relaxation time apprimxation (RTA) is not enough and the full scattering operator must be used. OpenBTE employes the following iterative scheme

.. math::

   \mathbf{v}_\mu\cdot\nabla T_\mu^{(n)} + T_\mu^{(n)} = \sum_\nu B_{\mu\nu}T_\nu^{(n-1)}

where

.. math::
    
   B_{\mu\nu} = \delta_{\mu\nu} - W_{\mu\nu}W_{\mu\mu}^{-1}.

The term :math:`\mathbf{W}` is the scattering matrix and :math:`T_\mu` the phonon pseudo temperatures. Upon convergence, the heat flux is computed with :math:`\mathbf{J} = \mathcal{V}^{-1} N^{-1} \sum_\mu C_\mu \mathbf{v}_\mu T_\mu`, where :math:`\mathbf{v}_\mu` is the group velocity and :math:`C_\mu` is the heat capacity; the latter is defined as :math:`C_\mu = k_B \eta_\mu \left(\sinh \eta_\mu \right)^{-2}`, where :math:`\eta_\mu = \hbar \omega_\mu/k_B/T_0/2`. Adiabatic boundary conditions are generally applied with :math:`T_{\mu^-} = \sum_{\nu^+} R_{\mu^-\nu^+} T_{\nu^+}`, where :math:`R_{\mu^-\nu^+}` is a reflection matrix, :math:`T_{\mu^-}` (:math:`T_{\mu^+}`) is related to incomng (outgoing) phonons. Currently, OpenBTE employes a crude approximation, i.e. all phonons thermalize to a boundary temperature, whose values is obtained by ensuring zero total incident flux [`Landon (2014)`_]. Within this approach, the reflection matrix reads as :math:`R_{\mu^-\nu^+}=-C_\nu\mathbf{v}_{\nu^-} \cdot \hat{\mathbf{n}} \left[\sum_{k^-} C_{k^-} \mathbf{v}_{k^-}\cdot \hat{\mathbf{n}} \right]^{-1}`.

Creating ``full.h5``
###############################################

The first step for solving the BTE with the full collision operator is tp create the file ``full.h5``. This file is an ``hdf5`` file that must have the following items:

.. table:: 
   :widths: auto
   :align: center

   +--------------------+-------------+---------------------------------------------------+---------------------+
   | **Item**           | **Shape**   |       **Units**                                   |    **Name**         |
   +--------------------+-------------+---------------------------------------------------+---------------------+
   | :math:`W`          |  N x N      |  :math:`\textrm{W}\textrm{K}^{-1}\textrm{m}^3`    | Scattering operator |
   +--------------------+-------------+---------------------------------------------------+---------------------+
   | :math:`C`          |  N          |  :math:`\mathrm{W}\textrm{K}^{-1}\textrm{s}`      | Heat capacity       |
   +--------------------+-------------+---------------------------------------------------+---------------------+
   | :math:`\mathbf{v}` |  N x 3      |  :math:`\mathrm{m}\textrm{s}^{-1}`                | Group velocity      |
   +--------------------+-------------+---------------------------------------------------+---------------------+
   | :math:`\kappa`     |  3 x 3      |  :math:`\mathrm{W}\textrm{K}^{-1}\textrm{m}^{-1}` | Thermal conductivity|
   +--------------------+-------------+---------------------------------------------------+---------------------+



Each item must be a ``numpy`` array with prescribed ``shape``. We recommend using the package Deepdish_ for IO ``hdf5`` operations. Within this formalism the thermal conductivity tensor is given by :math:`\langle S^{\alpha}|W^{\sim1}|S^{\beta}\rangle`, where :math:`S^\alpha_\mu = C_\mu v^\alpha_\mu` and :math:`\sim1` is the Moore-Penrose inverse. To check the consistencty of the data populating ``full.h5``, you may want to run this script:

.. code-block:: python

   import numpy as np
   import deepdish as dd

   data = dd.io.load('full.h5')
   S = np.einsum('i,ij->ij',data['C'],data['v'])
   kappa = np.einsum('i,ij,j->ij',S,np.linalg.pinv(data['W']),S)

   assert(np.allclose(kappa,data['kappa']))

Of course, the best practice is to have the ``kappa`` populating ``full.h5`` generated by the other items and compare it with the intended value.


Creating ``material.f5``
###############################################

With ``full.h5`` in your current directory, ``material.h5`` can be generated simply with

.. code-block:: python

   Material(model='full')

The ``Material`` will ensure that the scattering operator :math:`W` is energy conserving, i.e. :math:`\sum_\mu W_{\mu\nu} = \sum_\mu W_{\mu\nu} = 0`. This condition is applied by using the method of Lagrange multipliers [`Romano (2020)`_]


Interface with Phono3py (Experimental)
###############################################

Phono3py_ calculates the bulk thermal conductivity using the full scattering matrix defined here [`Chaput (2013)`_]. In order to be used in tandem with OpenBTE, Phono3py must be run with the following options ``--reducible-colmat --write-lbte-solution --lbte``. Once Phono3py is solved, the ``full.h5`` is created by


.. code-block:: bash

   phono3pytoOpenBTE unitcell_name nx ny nz

where ``unitcell_name`` is the file of your unit cell and ``nx ny nz`` is the reciprical space discretization.

Here is an example assuming you have a working installation of Phono3py:

.. code-block:: bash

   git clone https://github.com/phonopy/phono3py.git

   cd phono3py/examples/Si-PBEsol

   phono3py --dim="2 2 2" --sym-fc -c POSCAR-unitcell

   phono3py --dim="2 2 2" --pa="0 1/2 1/2 1/2 0 1/2 1/2 1/2 0" -c POSCAR-unitcell --mesh="8 8 8"  --reducible-colmat --write-lbte-solution  --fc3 --fc2 --lbte --ts=100

   phono3py2OpenBTE POSCAR-unitcell 8 8 8 100

Conversion from other collision matrix definitions
##################################################

If you are familiar with the form of the scattering operator, :math:`A` (in :math:`\textrm{s}^{-1}`), given by Eq. 13 in [`Fugallo et al. (2013)`_] , you may use the following conversion :math:`W_{\mu\nu} = A_{\mu\nu}\hbar\omega_\mu \hbar\omega_\nu \mathcal{V} N  k_B^{-1}T_0^{-2}` [`Romano (2020)`_], where :math:`\hbar\omega_\mu` is the energy of the :math:`\mu`-labelled phonons (:math:`\mu` colectively represents wave vector and polatization), :math:`k_B` is the Boltzmann constant, :math:`T_0` is the reference temperature, and :math:`\mathcal{V}` is the volume of the unit cell. Another definition of the scattering matrix, which we refer to as :math:`\mathbf{W}^v`, can be found in [`Vazrik et al. (2017)`_]. In this case the conversion is :math:`W_{\mu\nu} = W^v_{\mu\nu}C_\nu \mathcal{V} N`. Lastly, from the symmetrized matrix :math:`\tilde{\Omega}` defined in [`Cepellotti et al. (2016)`_], we have :math:`W_{\mu\nu}=\tilde{\Omega}_{\mu\nu}\sqrt{C_\nu}\sqrt{C_\mu}\mathcal{V}N`. This symmetrized matrix concides with the one defined here [`Chaput (2013)`_].

Two-dimensional materials
###############################################

For two-dimensional materials, a thickness :math:`L_c` is used for first-principles calculations. When reporting the thermal conductivity, however, and effective thickness, :math:`h`, is used. In practice, the volume of the unit cell must be computed as :math:`\mathcal{V} = \mathcal{V}_{\mathrm{DFT}} L_c/h`, where :math:`\mathcal{V}_{\mathrm{DFT}}` is the volume of the unit-cell used in DFT calculations [`Wu et al.`_]. This band-aid solution is often used to compare thermal conductivities of 2D and 3D materials. 



.. _Deepdish: https://deepdish.readthedocs.io/
.. _`Wu et al.`: https://www.sciencedirect.com/science/article/pii/S0009261416310193?via%3Dihub
.. _`Fugallo et al. (2013)`: https://arxiv.org/pdf/1212.0470.pdf
.. _`Romano (2020)`: https://arxiv.org/abs/2002.08940
.. _Phono3py: https://phonopy.github.io/phono3py/
.. _`Chaput (2013)`: https://journals.aps.org/prl/pdf/10.1103/PhysRevLett.110.265506?casa_token=BTUhHjniziYAAAAA%3AGw4C_2ql3cGvy6zwNe_38m7vz130fV7LYZMxrnIt_FSbmQauL3fczg5QT1b0EXTU39nYWEHYUHbv
.. _`Landon (2014)`: https://dspace.mit.edu/handle/1721.1/92161
.. _`Vazrik et al. (2017)` : https://arxiv.org/pdf/1711.07151.pdf
.. _`Cepellotti et al. (2016)` : https://journals.aps.org/prx/abstract/10.1103/PhysRevX.6.041013





